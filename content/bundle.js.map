{"version":3,"sources":["app.js","auth/signin.js","auth/signup.js","auth/userlinks.js","define/define.js","feed/feed.js","history/history.js","logs/logs.js","authinterceptor.js","currentuser.js","define.service.js","feed.service.js","logs.service.js","sessiontoken.js","users.service.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":["(function(){\n\n\tvar app= angular.module('workoutlog', [\n\t// dependencies\n\t'btford.socket-io',\n\t'ui.router',\n\t'workoutlog.define',\n\t'workoutlog.logs',\n\t'workoutlog.history',\n\t'workoutlog.feed',\n\t'workoutlog.auth.signup',\n\t'workoutlog.auth.signin'\n\t])\n\t.factory('socket', function(socketFactory){\n\t\tvar myIoSocket = io.connect('http://localhost:3000');\n\n\t\tvar socket = socketFactory({\n\t\t\tioSocket: myIoSocket\n\t\t});\n\n\t\treturn socket;\n\t});\n\t// services that are exposed by adding ui-router dependency\n\tfunction config($urlRouterProvider){\n\t\t// send to define route if not specified\n\t\t$urlRouterProvider.otherwise('/signin');\n\t}\n\t// what dependencies to inject into application\n\t// different way of ensuring minification doesn't mess up dependencies\n\tconfig.$inject = ['$urlRouterProvider'];\n\t// takes config function\n\tapp.config(config);\n\t// setting a global key/value pair\n\tapp.constant('API_BASE', '//localhost:3000/api/');\n\n})();","(function(){\n\tangular.module('workoutlog.auth.signin', ['ui.router'])\n\t\t.config(signinConfig);\n\n\tfunction signinConfig($stateProvider){\n\t\t$stateProvider\n\t\t\t.state('signin', {\n\t\t\t\turl: '/signin',\n\t\t\t\ttemplateUrl: '/components/auth/signin.html',\n\t\t\t\tcontroller: SignInController,\n\t\t\t\tcontrollerAs: 'ctrl',\n\t\t\t\tbindToController: this\n\t\t\t});\n\t}\n\tsigninConfig.$inject = [ '$stateProvider' ];\n\n\tfunction SignInController($state, UsersService){\n\t\tvar vm = this;\n\t\tvm.user = {};\n\t\tvm.login = function(){\n\t\t\t// communicates to API\n\t\t\tUsersService.login(vm.user)\n\t\t\t\t.then(function(response){\n\t\t\t\t\t$state.go('define');\n\t\t\t\t});\n\t\t};\n\t}\n\n\tSignInController.$inject = [ '$state', 'UsersService'];\n})();","(function(){\n\tangular.module('workoutlog.auth.signup', ['ui.router'])\n\t\t.config(signupConfig);\n\n\tfunction signupConfig($stateProvider) {\n\t\t$stateProvider\n\t\t\t.state('signup', {\n\t\t\t\turl: '/signup',\n\t\t\t\ttemplateUrl: '/components/auth/signup.html',\n\t\t\t\tcontroller: SignUpController,\n\t\t\t\tcontrollerAs: 'ctrl',\n\t\t\t\tbindToController: this\n\t\t\t});\n\t}\n\tsignupConfig.$inject = [ '$stateProvider' ];\t\n\t\n\tfunction SignUpController($state, UsersService){\n\t\t// view model\n\t\tvar vm = this;\n\t\tvm.user = {};\n\t\tvm.submit = function(){\n\t\t\tUsersService.create(vm.user)\n\t\t\t\t.then(function(response){\n\t\t\t\t\t$state.go('define');\n\t\t\t\t});\n\t\t};\n\t}\n\n\tSignUpController.$inject = [ '$state', 'UsersService' ];\n})();","// userlinks directive\n\n(function(){\n\n\tangular.module('workoutlog')\n\t\t.directive('userlinks',\n\t\t\tfunction(){\n\t\t\t\tUserLinksController.$inject = [ '$state', 'CurrentUser', 'SessionToken'];\n\t\t\t\tfunction UserLinksController($state, CurrentUser, SessionToken) {\n\t\t\t\t\tvar vm = this;\n\t\t\t\t\tvm.user = function(){\n\t\t\t\t\t\treturn CurrentUser.get();\n\t\t\t\t\t};\n\n\t\t\t\t\tvm.signedIn = function(){\n\t\t\t\t\t// !! turns this into a boolean type - in this case, if there's an id, return TRUE\n\t\t\t\t\t\treturn !!(vm.user().id);\n\t\t\t\t\t};\n\n\t\t\t\t\tvm.logout = function(){\n\t\t\t\t\t\tCurrentUser.clear();\n\t\t\t\t\t\tSessionToken.clear();\n\t\t\t\t\t\t$state.go('signup');\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tscope: {},\n\t\t\t\t\tcontroller: UserLinksController,\n\t\t\t\t\tcontrollerAs: 'ctrl',\n\t\t\t\t\tbindToController: true,\n\t\t\t\t\ttemplateUrl: '/components/auth/userlinks.html'\n\t\t\t\t};\n\t\t\t});\n\n})();","(function(){\n\t// new module called workoutlog.define\n\tangular.module('workoutlog.define', [\n\t\t// pass in ui-router\n\t\t'ui.router'\n\t])\n\t.config(defineConfig);\n\t\t\t\t\t\t// similar to saying require('stateProvider') in node\n\tfunction defineConfig($stateProvider){\n\n\t\t$stateProvider\n\t\t\t.state('define', {\n\t\t\t\turl: '/define',\n\t\t\t\ttemplateUrl: '/components/define/define.html',\n\t\t\t\tcontroller: DefineController,\n\t\t\t\tcontrollerAs: 'ctrl',\n\t\t\t\tbindToController: this,\n\t\t\t\tresolve: [\n\t\t\t\t\t'CurrentUser', '$q', '$state',\n\t\t\t\t\tfunction(CurrentUser, $q, $state){\n\t\t\t\t\t\tvar deferred = $q.defer();\n\t\t\t\t\t\tif (CurrentUser.isSignedIn()){\n\t\t\t\t\t\t\tdeferred.resolve();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdeferred.reject();\n\t\t\t\t\t\t\t$state.go('signin');\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn deferred.promise;\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t});\n\t}\n\n\tdefineConfig.$inject = [ '$stateProvider' ];\n\n\tfunction DefineController($state, DefineService){\n\t\tvar vm = this;\n\t\tvm.definition = {};\n\t\tvm.saved = false;\n\t\t// hey = vm.definition.typeOptions[0].value;\n\t\t// called by define.html and takes definition and passes to DefineService\n\t\tvm.save = function(){\n\t\t\tDefineService.save(vm.definition)\n\t\t\t.then(function(){\n\t\t\t\tvm.saved = true;\n\t\t\t});\n\t\t\t// for testing\n\t\t\tconsole.log(\"You just logged a new definition!\");\n\t\t\tconsole.log(vm.definition);\n\t\t};\n\n\t}\n\n\t// different way of ensuring minification doesn't mess up dependencies\n\tDefineController.$inject = [ '$state', 'DefineService' ];\n\n})();","(function() {\n\tangular.module('workoutlog.feed', [ 'ui.router' ])\n\t.config(feedConfig);\n\n\tfeedConfig.$inject = [ '$stateProvider' ];\n\n\tfunction feedConfig($stateProvider) {\n\t\t$stateProvider\n\t\t\t.state('feed', {\n\t\t\t\turl: '/feed',\n\t\t\t\ttemplateUrl: '/components/feed/feed.html',\n\t\t\t\tcontroller: FeedController,\n\t\t\t\tcontrollerAs: 'ctrl',\n\t\t\t\tbindToController: this,\n\t\t\t\tresolve: {\n\t\t\t\t\tgetFeed: [\n\t\t\t\t\t\t'FeedService',\n\t\t\t\t\t\tfunction(FeedService) {\n\t\t\t\t\t\t\treturn FeedService.fetch();\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tFeedController.$inject = [ 'socket', 'FeedService', 'CurrentUser' ];\n\tfunction FeedController(socket, FeedService, CurrentUser) {\n\t\tvar vm = this;\n\t\tvm.msg = {};\n\t\tvm.feed = FeedService.get();\n\n\t\tvm.create = function() {\n\t\t\tvm.msg.username = CurrentUser.get().username;\n\t\t\tsocket.emit('chat-message', vm.msg);\n\t\t\tvm.msg.message = '';\n\t\t};\n\n\t\tsocket.on('new log', function(data) {\n\t\t\tvm.feed.push(data);\n\t\t});\n\n\t\tsocket.on('chat-message', function(data) {\n\t\t\tvm.feed.push(data);\n\t\t});\n\t}\n})();","(function(){\n\n\tangular.module('workoutlog.history', [\n\t\t'ui.router'\n\t\t])\n\t.config(historyConfig);\n\n\tfunction historyConfig($stateProvider){\n\t\t$stateProvider\n\t\t\t.state('history', {\n\t\t\t\turl: '/history',\n\t\t\t\ttemplateUrl: '/components/history/history.html',\n\t\t\t\tcontroller: HistoryController,\n\t\t\t\tcontrollerAs: 'ctrl',\n\t\t\t\tbindToController: true,\n\t\t\t\tresolve: {\n\t\t\t\t\tgetUserLogs: [\n\t\t\t\t\t\t'LogsService',\n\t\t\t\t\t\tfunction(LogsService) {\n\t\t\t\t\t\t\treturn LogsService.fetch();\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\thistoryConfig.$inject = [ '$stateProvider' ];\n\n\tfunction HistoryController(LogsService){\n\t\tvm = this;\n\t\tvm.history = LogsService.getLogs();\n\t}\n\n\tHistoryController.$inject = [ 'LogsService' ];\n})();","(function(){\n\n\tangular.module('workoutlog.logs', [\n\t\t'ui.router'\n\t])\n\t.config(logsConfig);\n\n\tfunction logsConfig($stateProvider){\n\n\t\t$stateProvider\n\t\t\t.state('logs', {\n\t\t\t\turl: '/logs',\n\t\t\t\ttemplateUrl: '/components/logs/logs.html',\n\t\t\t\tcontroller: LogsController,\n\t\t\t\tcontrollerAs: 'ctrl',\n\t\t\t\tbindToController: true,\n\t\t\t\tresolve: {\n\t\t\t\t\tgetUserDefinitions: [\n\t\t\t\t\t\t'DefineService',\n\t\t\t\t\t\tfunction(DefineService) {\n\t\t\t\t\t\t\treturn DefineService.fetch();\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tlogsConfig.$inject = [ '$stateProvider' ];\n\n\tfunction LogsController($state, DefineService, LogsService){\n\t\tvar vm = this;\n\t\tvm.log = {};\n\t\tvm.saved = false;\n\t\tvm.userDefinitions = DefineService.getDefinitions();\n\t\tvm.save = function(log){\n\t\t\tLogsService.save(vm.log)\n\t\t\t.then(function(){\n\t\t\t\tvm.saved = true;\n\t\t\t});\n\t\t\tconsole.log(\"You just saved a new log!\");\n\t\t\tconsole.log(vm.log);\n\t\t\tconsole.log(vm.log.def);\n\t\t};\n\t}\n\n\tLogsController.$inject = [ '$state', 'DefineService', 'LogsService'];\n\n})();","(function() {\n\tangular.module('workoutlog')\n\t\t.factory('AuthInterceptor', \n\t\t\t[ 'SessionToken', 'API_BASE', \n\t\t\tfunction(SessionToken, API_BASE) {\n\t\t\t\treturn {\n\t\t\t\t\trequest: function(config) {\n\t\t\t\t\t\tvar token = SessionToken.get();\n\t\t\t\t\t\tif (token && config.url.indexOf(API_BASE) > -1) {\n\t\t\t\t\t\t\tconfig.headers['Authorization'] = token;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn config;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}]);\n\n\tangular.module('workoutlog')\n\t\t.config(['$httpProvider', function($httpProvider) {\n\t\t\treturn $httpProvider.interceptors.push('AuthInterceptor');\n\t\t}]);\n})();","(function() {\n\tangular.module('workoutlog')\n\t\t.service('CurrentUser', [ '$window', function($window) {\n\t\t\tfunction CurrentUser() {\n\t\t\t\tvar currUser = $window.localStorage.getItem('currentUser');\n\t\t\t\tif (currUser && currUser !== \"undefined\") {\n\t\t\t\t\tthis.currentUser = JSON.parse($window.localStorage.getItem('currentUser'));\n\t\t\t\t}\n\t\t\t}\n\t\t\tCurrentUser.prototype.set = function(user) {\n\t\t\t\tthis.currentUser = user;\n\t\t\t\t$window.localStorage.setItem('currentUser', JSON.stringify(user));\n\t\t\t};\n\t\t\tCurrentUser.prototype.get = function() {\n\t\t\t\treturn this.currentUser || {};\n\t\t\t};\n\t\t\tCurrentUser.prototype.clear = function() {\n\t\t\t\tthis.currentUser = undefined;\n\t\t\t\t$window.localStorage.removeItem('currentUser');\n\t\t\t};\n\t\t\tCurrentUser.prototype.isSignedIn = function() {\n\t\t\t\treturn !!this.get().id;\n\t\t\t};\n\t\t\treturn new CurrentUser();\n\t\t}]);\n})();","(function(){\n\n\tangular.module('workoutlog')\n\t\t.service('DefineService', DefineService);\n\n\t\tDefineService.$inject = [ '$http', 'API_BASE' ];\n\t\tfunction DefineService($http, API_BASE) {\n\t\t\tvar defineService = this;\n\t\t\tdefineService.userDefinitions = [];\n\n\t\t\tdefineService.save = function(definition) {\n\t\t\t\t// takes definition from DefineService and calls to API with $http.post\n\t\t\t\treturn $http.post(API_BASE + 'definition', {\n\t\t\t\t\tdefinition: definition\n\t\t\t\t}).then(function(response){\n\t\t\t\t\t\t\t\t\t\t\t// unshift adds to front of array\n\t\t\t\t\tdefineService.userDefinitions.unshift(response.data);\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tdefineService.fetch = function(){\n\t\t\t\treturn $http.get(API_BASE + 'definition')\n\t\t\t\t.then(function(response){\n\t\t\t\t\tdefineService.userDefinitions = response.data;\n\t\t\t\t});\n\t\t\t};\n\n\t\t\t// abbreviation so we can have def = defineService.getDefinitions VS def = defineService.userDefinitions\n\t\t\tdefineService.getDefinitions = function(){\n\t\t\t\treturn defineService.userDefinitions;\n\t\t\t};\n\t\t}\n})();","(function() {\n\tangular.module('workoutlog')\n\t.service('FeedService', FeedService);\n\n\tFeedService.$inject = [ '$http', 'API_BASE', 'socket' ];\n\tfunction FeedService($http, API_BASE, socket) {\n\t\tvar feedService = this;\n\t\tfeedService.feed = [];\n\n\t\tfeedService.fetch = function() {\n\t\t\treturn $http.get(API_BASE + 'feed')\n\t\t\t.then(function(response) {\n\t\t\t\tfeedService.feed = response.data;\n\t\t\t});\n\t\t};\n\n\t\tfeedService.get = function() {\n\t\t\treturn feedService.feed;\n\t\t};\n\t}\n})();","(function(){\n\n\tangular.module('workoutlog')\n\t\t.service('LogsService', LogsService);\n\n\t\tLogsService.$inject = [ '$http', 'API_BASE' ];\n\t\tfunction LogsService($http, API_BASE) {\n\t\t\t// setting logsService = to 'this' allows us to use logsService instead of $scope\n\t\t\tvar logsService = this;\n\t\t\tlogsService.workouts = [];\n\n\t\t\tlogsService.save = function(log) {\n\t\t\t\treturn $http.post(API_BASE + 'log', {\n\t\t\t\t\tlog: log\n\t\t\t\t}).then(function(response){\n\t\t\t\t\tlogsService.workouts.push(response.data);\n\t\t\t\t\tconsole.log(log);\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tlogsService.delete = function(log) {\n\t\t\t\treturn $http.delete(API_BASE + 'log', {\n\t\t\t\t\tlog: log\n\t\t\t\t}).then(function(response){\n\t\t\t\t\tlogsService.workouts.push(response.data);\n\t\t\t\t\tconsole.log(log);\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tlogsService.fetch = function(){\n\t\t\t\treturn $http.get(API_BASE + 'log')\n\t\t\t\t\t.then(function(response){\n\t\t\t\t\t\tlogsService.workouts = response.data;\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\tlogsService.getLogs = function(){\n\t\t\t\treturn logsService.workouts;\n\t\t\t};\n\t\t}\t\n})();","(function() {\n\tangular.module('workoutlog')\n\t\t.service('SessionToken', [ '$window', function($window) {\n\t\t\tfunction SessionToken() {\n\t\t\t\tthis.sessionToken = $window.localStorage.getItem('sessionToken');\n\t\t\t}\n\t\t\tSessionToken.prototype.set = function(token) {\n\t\t\t\tthis.sessionToken = token;\n\t\t\t\t$window.localStorage.setItem('sessionToken', token);\n\t\t\t};\n\t\t\tSessionToken.prototype.get = function() {\n\t\t\t\treturn this.sessionToken;\n\t\t\t};\n\t\t\tSessionToken.prototype.clear = function() {\n\t\t\t\tthis.sessionToken = undefined;\n\t\t\t\t$window.localStorage.removeItem('sessionToken');\n\t\t\t};\n\t\t\treturn new SessionToken();\n\t\t}]);\n})();","(function(){\n\n\tangular.module('workoutlog')\n\t\t.service('UsersService', [\n\t\t\t'$http', 'API_BASE', 'SessionToken', 'CurrentUser',\n\t\t\tfunction($http, API_BASE, SessionToken, CurrentUser){\n\t\t\t\tfunction UsersService(){\n\t\t\t\t}\n\n\t\t\t\tUsersService.prototype.create = function(user){\n\t\t\t\t\tvar userPromise = $http.post(API_BASE + \"user\", {\n\t\t\t\t\t\tuser: user\n\t\t\t\t\t});\n\n\t\t\t\t\tuserPromise.then(function(response){\n\t\t\t\t\t\tSessionToken.set(response.data.sessionToken);\n\t\t\t\t\t\tCurrentUser.set(response.data.user);\n\t\t\t\t\t});\n\t\t\t\t\treturn userPromise;\n\t\t\t\t};\n\n\t\t\t\tUsersService.prototype.login = function(user){\n\t\t\t\t\tvar loginPromise = $http.post(API_BASE + 'login', {\n\t\t\t\t\t\tuser: user\n\t\t\t\t\t});\n\n\t\t\t\t\tloginPromise.then(function(response){\n\t\t\t\t\t\tSessionToken.set(response.data.sessionToken);\n\t\t\t\t\t\tCurrentUser.set(response.data.user);\n\t\t\t\t\t});\n\t\t\t\t\treturn loginPromise;\n\t\t\t\t};\n\n\t\t\t\treturn new UsersService();\n\t\t\t}\n\t\t]);\n})();"],"sourceRoot":"/source/"}